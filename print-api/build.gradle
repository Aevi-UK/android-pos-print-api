plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "com.github.dcendents.android-maven" version "1.5"
}
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

version = "0.0.4-SNAPSHOT"
group = 'com.aevi.print'
ext.artifactId = 'print-api'

android {
    compileSdkVersion projectTargetSdkVersion
    buildToolsVersion androidBuildVersion

    defaultConfig {
        minSdkVersion projectMinSdkVersion
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile domainDependencies.rxMessenger

    testCompile testDependencies.junit
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric
    testCompile testDependencies.assertJ
}

def siteUrl = 'https://github.com/Aevi-UK/android-pos-print-api'
def gitUrl = 'https://github.com/Aevi-UK/android-pos-print-api.git'

bintray {
    configurations = ['archives']

    pkg {
        repo = 'aevi-uk'
        name = 'android-pos-print-api'
        userOrg = 'aevi'
        licenses = ['Apache-2.0']
        labels = ['printing', 'receipt', 'POS', 'android']
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/Aevi-UK/android-pos-print-api/issues'
        vcsUrl = gitUrl
        publicDownloadNumbers = true
    }
}

if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayKey')) {
    bintray.user = project.bintrayUser
    bintray.key = project.bintrayKey
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'AndroidPosPrintApi'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'brettwold'
                        name 'Brett Cherrington'
                        email 'brett@annalytics.co.uk'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        print(MavenPublication) {
            groupId group
            artifactId "${artifactId}"
            version version

            artifact bundleRelease
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.compile.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}